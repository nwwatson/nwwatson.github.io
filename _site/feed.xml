<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nicholas W. Watson</title>
    <description>Husband, Father, God fearing VP of Technology at Gleason Technology. Thoughts on technology, software and management.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 17 Mar 2017 15:03:49 -0400</pubDate>
    <lastBuildDate>Fri, 17 Mar 2017 15:03:49 -0400</lastBuildDate>
    <generator>Jekyll v3.4.2</generator>
    
      <item>
        <title>Postgres Fu For Faster Apis</title>
        <description>
</description>
        <pubDate>Tue, 14 Mar 2017 22:07:18 -0400</pubDate>
        <link>http://localhost:4000/2017/03/14/postgres-fu-for-faster-apis.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/14/postgres-fu-for-faster-apis.html</guid>
        
        
      </item>
    
      <item>
        <title>Beginning Vapor: Lets Write a Blog</title>
        <description>&lt;p&gt;Over 10 years ago, Ruby on Rails made a huge impact on me when I saw the
“Blog in 15 Minutes” tutorial. The simple tutorial, in which a simple blog
application was scaffolded show all that you needed to know in order to get
started using Rails. The “Blog in 15 Minutes” tutorial is the gold standard for
introducing a framework.&lt;/p&gt;

&lt;p&gt;When writing a tutorial, many authors focus on showing would-be developers all the
features of the framework/language, but completely miss explain how to structure
a cohesive application. Many tutorials show an application thats built in one file,
or if they do create separate files, they create “buckets full of method” files
which do not show new users how to break applications in to smaller components.&lt;/p&gt;

&lt;p&gt;My goal with this tutorial is to build a small blog built using Vapor, a server
side framework for Swift. I’d like to cover the following topics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setup of Vapor on MacOS Sierra&lt;/li&gt;
  &lt;li&gt;The creation of a Vapor projects&lt;/li&gt;
  &lt;li&gt;Connecting the Vapor project to a database&lt;/li&gt;
  &lt;li&gt;Building a controller that will handle the CRUD methods for creating posts&lt;/li&gt;
  &lt;li&gt;Building Leaf templates to build the user interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;In the future, I may add additional posts which will add user authentication,
move the creation of blog posts in to an administrative area, and possibly add
tags to a post. With that, lets get started with our first Vapor project.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;I’m going to be doing this tutorial on MacOS Sierra. To follow along, install
XCode from the Apple App Store. If you wish to do development on an Ubuntu box,
&lt;a href=&quot;https://vapor.github.io/documentation/getting-started/install-swift-3-ubuntu.html&quot;&gt;follow the installation instructions provided on Vapor’s site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Vapor project team provides the Vapor Toolbox which helps you to quickly
scaffold a Vapor project. You can install it by opening up terminal and running
the following command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -sL check.vapor.sh | bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After installation, test that everything works.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vapor --help
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;creating-our-first-project&quot;&gt;Creating Our First Project&lt;/h1&gt;

&lt;p&gt;We’re going to use the Vapor Toolbox to create our first project. By default, Vapor
scaffolds an application with an example model and controller created. For the
purpose of this tutorial, I’d like to create these manually, so we’re going to
specify a custom template I created.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vapor new VaporBlog --template&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nwwatson/vapor-starter
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will scaffold a default project structure. Don’t worry much about it right
now. We’ll dive more in to that shortly. The first thing we want to do is build
and run the project to ensure everything works. To build the project, run the
following command in terminal:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vapor build
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once the project is built, lets run it to ensure everything works correctly.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vapor run serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At this point, you should be able to open the web address &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt; in your browser and
see our application running.&lt;/p&gt;

&lt;h2 id=&quot;creating-an-xcode-project&quot;&gt;Creating an XCode Project&lt;/h2&gt;

&lt;p&gt;We are going to use XCode for this tutorial. While you can develop Swift
applications using other tools, such as Atom, XCode provides an integrated
environment that will greatly help for development and trouble shooting. To
generate the XCode project, use the following shell command.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vapor xcode
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The console will ask if you would like to open the XCode project. Type a ‘Y’
and hit return, the XCode project should open for you.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-a-database&quot;&gt;Setting Up A Database&lt;/h2&gt;

&lt;p&gt;For this tutorial, we’re going to use SQLite for data storage This provides a
simple way to develop an application without having setup MySQL or PostgeSQL
connection strings. SQLite should be installed by default if you’re using MacOS,
if not, you can install it using Homebrew.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install sqlite3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once installed, we’ll need to setup our vapor project to use SQLite. The first
thing we have to do is modify our Package.swift file to include the SQLite
provider for Vapor.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PackageDescription&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;VaporBlog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://github.com/vapor/vapor.git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;majorVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://github.com/vapor/sqlite-provider.git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;majorVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Database&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Localization&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Public&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Resources&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once you have made the change to Package.swift, you’ll need to build and regenerate
the XCode project in order to get the SQLite 3 dependencies as a part of your project.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vapor clean &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; vapor xcode
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once XCode is reopened, we will need to add configuration to tell Vapor where to
place our SQLite database. Lets create a sqlite.json file in the Config directory
of the project.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/db/database.sqlite3&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The path specified in this file is set relatively from the Vapor project’s
working directory. We want to ensure that the sqlite file does not get checked
in to source control (if you’re using one), so we’re going to add it to our
.gitignore file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Packages
.build
xcuserdata
*.xcodeproj
Config/secrets
/db/*.sqlite3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally, we will write some code to connect to the SQLite3 database and display
the version to ensure we have everything setup correctly. First, we’ll import
the SQLite3 provider in to Main.swift&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VaporSQLite&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, we’re going to add provider to the Vapor Droplet for SQLite.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VaporSQLite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally, we’re going to modify our base route to query for the version of
SQLite and pass along data to our view&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT sqlite_version()&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sqlite_version()&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;welcome&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;sqlite-version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;app-name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;app-description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;app-author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When all is said and done, your Main.swift file should look like this.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vapor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VaporSQLite&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Droplet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VaporSQLite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT sqlite_version()&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sqlite_version()&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;welcome&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;sqlite-version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;app-name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;app-description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;app-author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now to test things out. Run the application using XCode and visit (http://localhost:8080](http://localhost:8080) in your browser.&lt;/p&gt;

&lt;h2 id=&quot;creating-our-post-model&quot;&gt;Creating Our Post Model&lt;/h2&gt;

&lt;p&gt;Now that SQLite is setup, lets build a model to represent our blog post. The
Model will use Vapor’s object relational mapping library Fluent. Fluent allows
developers to interact with the database without having to write SQL code.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;touch Sources/App/Models/Post.swift
vapor xcode
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vapor&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//var postedOn: Double&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;revert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;creating-a-controller&quot;&gt;Creating a Controller&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;touch Sources/App/Controllers/PostsController.swift
vapor xcode
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 14 Mar 2017 19:25:00 -0400</pubDate>
        <link>http://localhost:4000/swift/vapor/postgresql/2017/03/14/vapor-blog.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/vapor/postgresql/2017/03/14/vapor-blog.html</guid>
        
        
        <category>swift</category>
        
        <category>vapor</category>
        
        <category>postgresql</category>
        
      </item>
    
      <item>
        <title>PushIonic - A Gem For Sending Push Notifications With Ionic.io</title>
        <description>&lt;p&gt;We are in the the middle of adding push notificaitons to our mobile application
and started to look at available push notification services. We took a look
at all the usual suspects such as Amazon SMS, Parse and Pusher. One service
that intrigued us with Ionic Push Notifications, because our application is
written using the Ionic Framework.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In order to test things out, we created a simple gem that would allow us to
send push notifications using the service. &lt;a href=&quot;https://github.com/nwwatson/ionic_push&quot;&gt;IonicPush&lt;/a&gt; is a Ruby gem that provides
a simple to use interface with Ionic.io’s Push Notification service. Work on this
is on-going, however the current version available works completely.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Add the following to your Gemfile and bundle install&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem 'ionic_push', github: 'nwwatson/ionic_push', branch: 'master'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Run the Rails generator to install the initializer in to your Rails project.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec rails g ionic_push:install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Configure the ionic_push.rb file within config/initializers. You can view the environment
variables that are there, or change them for someting else.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/0c12bfe317fc8c96e8b0.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;sending-a-push-notification&quot;&gt;Sending a Push Notification&lt;/h2&gt;

&lt;p&gt;Sending a push notification is simple. All you need to have is an array of device tokens and a message.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/bcf7483dc464d1ad5835.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;wrapping-it-up&quot;&gt;Wrapping It Up&lt;/h2&gt;

&lt;p&gt;Our experience so far has been really positive. Ionic Push Notifications were simple to integrate
&lt;a href=&quot;http://docs.ionic.io/v1.0/docs/push-from-scratch&quot;&gt;by following their online documentation&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jul 2015 17:00:00 -0400</pubDate>
        <link>http://localhost:4000/ruby/ionic/gem/2015/07/30/quick-gem-for-ionic-push-notifications.html</link>
        <guid isPermaLink="true">http://localhost:4000/ruby/ionic/gem/2015/07/30/quick-gem-for-ionic-push-notifications.html</guid>
        
        
        <category>ruby</category>
        
        <category>ionic</category>
        
        <category>gem</category>
        
      </item>
    
      <item>
        <title>Getting ruby-saml to work with Azure AD</title>
        <description>&lt;p&gt;I’m going to make this short and sweet. So you’ve been tasked with using SAML to authenticate users with  Azure AD. Sure, there are other mechanisms available, but this client wants SAML. No problem. Knowning nothing about AD or SAML, but having some experience with OAuth, you think “This couldn’t be that hard”. Then you find out SAML 2.0 is a little more complicated than OAuth.&lt;/p&gt;

&lt;p&gt;I’m not going to walk you though a example on how to build. There are examples available, specifically &lt;a href=&quot;https://github.com/onelogin/ruby-saml-example&quot;&gt;ruby-saml-example&lt;/a&gt;. I’ll use this to properly show you how to configure Azure AD.&lt;/p&gt;

&lt;h2 id=&quot;signup-for-an-azure-account&quot;&gt;Signup for an Azure account&lt;/h2&gt;

&lt;p&gt;While I’m happy to write this quick tutorial, I’m not going to walk you through create an Azure account. Its self explanitory. You can do it.&lt;/p&gt;

&lt;h2 id=&quot;create-an-active-directory&quot;&gt;Create an Active Directory&lt;/h2&gt;

&lt;h2 id=&quot;add-an-application&quot;&gt;Add an Application&lt;/h2&gt;

&lt;h2 id=&quot;configure-ruby-saml-settings&quot;&gt;Configure ruby-saml Settings&lt;/h2&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;idp_metadata_parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OneLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RubySaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IdpMetadataParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# This does all the hard work. it grabs the federation metadata from Azure&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idp_metadata_parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse_remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://login.microsoftonline.com/FunnyImNotGivingYouThis/federationmetadata/2007-06/federationmetadata.xml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;# This is the URL that Azure AD calls back after a successful login&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assertion_consumer_service_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:3000/saml/acs&quot;&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;# This URL will be calledback after a logout event&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assertion_consumer_logout_service_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:3000/saml/logout&quot;&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;# Microsoft calls this the Client ID. Copy it from your application's &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# properties in Azure and drop it here.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;issuer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;55555555-5555-5555-5555-555555555555&quot;&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;# You need to copy the  X509 certificate out of the &amp;lt;ds:Signature&amp;gt; node of the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# federation metadata xml file. Then go to https://www.samltool.com/fingerprint.php&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# and paste it in to the x509 cert field. Use the Formatted Fingerprint in the line &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# below&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;idp_cert_fingerprint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;It:Is:So:me:Th:in:gL:ik:eT:hi:sB:ut:Re:al&quot;&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;# You shouldn't have to change this line. Works like a champ.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name_identifier_format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 21 May 2015 19:57:00 -0400</pubDate>
        <link>http://localhost:4000/ruby,/rails/2015/05/21/getting-ruby-saml-to-work-with-azure.html</link>
        <guid isPermaLink="true">http://localhost:4000/ruby,/rails/2015/05/21/getting-ruby-saml-to-work-with-azure.html</guid>
        
        
        <category>ruby,</category>
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Ignoring Changes in Tracked Files with Git</title>
        <description>&lt;p&gt;We use Rubinius in production, but in development Rubinuis is slow. Those few seconds of waiting for Rubinius to compile all your Ruby files add up and I’m impatient.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;To combat this problem, I like to be able to change the .ruby-version file (we use rbenv) to use the latest version of MRI. Naturally, we don’t want to check this in. Luckily, we can do this with git:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git update-index --assume-unchanged &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When we want to track it again&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git update-index --no-assume-unchanged &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 12 May 2015 04:18:00 -0400</pubDate>
        <link>http://localhost:4000/learning/git/2015/05/12/ignoring-changes-in-tracked-files-git.html</link>
        <guid isPermaLink="true">http://localhost:4000/learning/git/2015/05/12/ignoring-changes-in-tracked-files-git.html</guid>
        
        
        <category>learning</category>
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Articles of Interest for the Week Ending May 1</title>
        <description>&lt;h2 id=&quot;programming-with-toys-and-magic-should-be-relished-not-scorned&quot;&gt;&lt;a href=&quot;http://bit.ly/1FylNoC&quot;&gt;Programming with toys and magic should be relished, not scorned&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Early in my career I was a ColdFusion developer. The company I was working at was a defense contractor where many of the projects were written in either Java or C#. My team’s focus was building Web based applications such as event registrations, content management systems, social networks and file sharing solutions. Each of our systems stored data in a relational database, required 99% uptime and required tight security. I remember one day, a peer walked in to my cube and asked “When are you going to ditch ColdFusion, stop being a “web developer” and work on real software with Java”. The real software he/she was writting was Java Web application running on Tomcat that took a zip file, unzipped it, pulled out an XML file, and ensured that the XML file was valid with an XSD. ColdFusion may not have had the magic of RoR, but I can easily relate to this article. Just because it isn’t Java or C# doesn’t mean it isn’t a “real application” or isn’t “real programming”.&lt;/p&gt;

</description>
        <pubDate>Fri, 01 May 2015 19:57:00 -0400</pubDate>
        <link>http://localhost:4000/ruby,/rails/2015/05/01/articles-of-interest-week-ending-may-1.html</link>
        <guid isPermaLink="true">http://localhost:4000/ruby,/rails/2015/05/01/articles-of-interest-week-ending-may-1.html</guid>
        
        
        <category>ruby,</category>
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Articles of Interest for the Week Ending April 24</title>
        <description>&lt;p&gt;I like to share articles with my team that I find interesting. This weeks articles of interest include a CloudKit introduction, managing large data sets in PostgreSQL, news on Rails 5, and basics that all developers should know about JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;managing-big-enough-data-in-postgres&quot;&gt;&lt;a href=&quot;http://bit.ly/1QnKBDV&quot;&gt;Managing big enough data in postgres&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;One of the largest problems for developers is keeping their applications fast and available in the face of
large data sets. Many automatically look for NoSQL solutions to solve the problem tradinging data integrity and ACID compliance for speed. While NoSQL solutions have there place, its good to know how to tune your current
relational database. This quick little article does that, explainging table table inheritance and table spaces.&lt;/p&gt;

&lt;h2 id=&quot;working-with-cloudkit-in-ios-8&quot;&gt;&lt;a href=&quot;http://bit.ly/1EvjEJk&quot;&gt;Working with CloudKit in iOS 8&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;When Apple released CloudKit and Swift at WWDC 2014, I was intregued. From a distant view, it look as though Apple lowered the cost of entry for building cloud connected systems. Now, I realize that CloudKit, and the use of Apple’s cloud services is only available within its own ecosystem, which is a severe limitation if you need to build for iOS and another platform. However, in my minimal time I have spent with Swift, I’ve liked it. Building something with CloudKit is a goal for me, and this article just might be the start.&lt;/p&gt;

&lt;h2 id=&quot;7-deadly-sins-of-ruby-metaprogramming&quot;&gt;&lt;a href=&quot;http://bit.ly/1HISXC3&quot;&gt;7 Deadly Sins of Ruby Metaprogramming&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Learning to metaprogram in Ruby will add a whole lot of possiblities to your code. Once you get started, your tempted to do it everywhere, however you must do so wisely. 7 Deadly Sins of Ruby Metaprogramming explains some of the gotchas that you can encounter. Its a must read for anyone interested in metaprogramming in Ruby.&lt;/p&gt;

&lt;h2 id=&quot;why-rails-5--turbolinks-30--action-cable-matter-and-why-dhh-was-right-all-along&quot;&gt;&lt;a href=&quot;http://bit.ly/1FpKeV6&quot;&gt;Why Rails 5 / Turbolinks 3.0 / Action Cable matter, and why @dhh was right all along&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This article gets a lot right. The advent of the JavaScript single page application has drastically complicated web development. While I have written single page applications, I can’t say that I enjoy it. It doesn’t matter if its Angular, Ember or Backbone, it adds additional complexity that makes building applications take more time. The additional time and cost associated with these applications means that its going to take you longer to get your product to market. What I loved about Rails is the ability to build web applications fast. I’m glad that the team takes ease of use seriously. I also can’t wait to see web sockets and web api baked in.&lt;/p&gt;

&lt;h2 id=&quot;the-basics-of-variable-scope-in-javascript&quot;&gt;&lt;a href=&quot;http://bit.ly/1GmYav1&quot;&gt;The Basics Of Variable Scope In JavaScript&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Just getting started in JavaScript? Make sure you understand scope. Read about scope until you understand it. Once you understand scope, you can then move on to master the language. Once your done with scope, you may want to move on to understanding the &lt;a href=&quot;http://bit.ly/1OWKw6F&quot;&gt;Common Misconceptions About Inheritance in JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interested in more? Follow &lt;a href=&quot;http://bit.ly/1DSTSgu&quot;&gt;Tots on Programming on Flipboard&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Apr 2015 19:57:00 -0400</pubDate>
        <link>http://localhost:4000/articles/postgres/cloudkit/ruby/javascript/2015/04/26/articles-of-interest-week-ending-april-24.html</link>
        <guid isPermaLink="true">http://localhost:4000/articles/postgres/cloudkit/ruby/javascript/2015/04/26/articles-of-interest-week-ending-april-24.html</guid>
        
        
        <category>articles</category>
        
        <category>postgres</category>
        
        <category>cloudkit</category>
        
        <category>ruby</category>
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>The Importance of 30 Minutes a Day</title>
        <description>&lt;p&gt;One of the most important things that a software developer can do is to continuously
learn. Learning can happen “on the job”, through experimentation, or reading and
interacting with others in the community. Today, I want to talk about reading and
interacting with others in the community.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Here’s how most developers work; they encounter a problem on the job and immediately
reach out to google for a solution. The first person who
has a solution that “fixes” their problem wins. The issue with this approach is
that you don’t know if the solution you’ve chosen is the best solution for your situation.
What do you have to compare it to? Why did you select it? Is there a better
solution out there?&lt;/p&gt;

&lt;p&gt;In order to combat this, I’ve encouraged my team members to take the first 30
minutes of each day to learn. This can be done through blogs, newsletters, or news
readers such as FlipBoard and Zite. Lets break this in to a quick process which
occurs daily.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choose topics that interest you.&lt;/strong&gt; Focus on the things you like doing and discover
new techniques, open source libraries or tools that can help you. Take the time to
compare what you currently do to what the author recommends. Is their way better?
Can you improve the author’s technique? Can you contribute anything?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Identify something your weak at, and find sources to help you.&lt;/strong&gt; Everyone has a
weakness. Maybe you struggle with relational databases, or you just don’t understand
why anyone would want to use a graph database. Choose a topic that you feel that you
need to understand better and read up on it daily.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Share what you’ve read with co-workers.&lt;/strong&gt; Sharing is an important part of the learning
process. By sharing, you’ll gain other vantage points on a particular issue. You will
 also be able to learn if others around you have similar interests or have complimentary
 interests. If you’re the only developer, join local groups or connect on social networks
 with others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Put it to practice.&lt;/strong&gt; Put your new found skills to practice, but be carefully not to
insert your new skill or technique in an area which will ultimately have a negative
impact on your work. Its always nice to find a awesome new library, but having too
many awesome new libraries in your project will ultimately cause clutter and lead to
poor code quality.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contribute back.&lt;/strong&gt; Have you found a better way to solve a problem? Have you modified
someone else’s technique for use in your daily work? Contribute it back using the
blogs comments, or blog about it yourself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learning is continuous.&lt;/strong&gt; Don’t just be a Googler, searching aimlessly for solutions.
Take the time to learn emerging technologies, understand their costs and benefits, and
grow your knowledge so that the next time you encounter a problem you are less likely to
go to Google and more likely to solve the problem yourself.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Apr 2015 15:35:12 -0400</pubDate>
        <link>http://localhost:4000/learning/2015/04/19/thrity-minutes-a-day.html</link>
        <guid isPermaLink="true">http://localhost:4000/learning/2015/04/19/thrity-minutes-a-day.html</guid>
        
        
        <category>learning</category>
        
      </item>
    
      <item>
        <title>Welcome</title>
        <description>&lt;p&gt;Hi, I’m Nicholas Watson. I’m a developer and leader. I’m constantly digging in to “tech” in order to deliver products and services. My interests consist of software languages, the internet of things, and big data. I currently serve as Vice President of Technology at Gleason Technology, Inc.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Apr 2015 14:35:12 -0400</pubDate>
        <link>http://localhost:4000/2015/04/19/welcome-to-my-random-thoughts.html</link>
        <guid isPermaLink="true">http://localhost:4000/2015/04/19/welcome-to-my-random-thoughts.html</guid>
        
        
      </item>
    
  </channel>
</rss>
